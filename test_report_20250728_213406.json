{
  "timestamp": "2025-07-28T21:34:06.497295",
  "total_duration": 5.773987531661987,
  "test_results": [
    {
      "name": "Unit Tests",
      "status": "\u274c FAIL",
      "duration": 0.13404512405395508,
      "total_tests": 23,
      "failures": 0,
      "errors": 0,
      "success_rate": 65.2,
      "output": "\n============================================================\nUNIT TEST SUMMARY\n============================================================\nTests run: 23\nFailures: 0\nErrors: 8\nSuccess rate: 65.2%\n",
      "error_output": "test_error_handler_init (__main__.TestErrorHandler.test_error_handler_init)\nTest ErrorHandler initialization ... ok\ntest_error_levels (__main__.TestErrorHandler.test_error_levels)\nTest all error levels ... ok\ntest_log_error (__main__.TestErrorHandler.test_log_error)\nTest error logging functionality ... ERROR\ntest_safe_execute_decorator (__main__.TestErrorHandler.test_safe_execute_decorator)\nTest safe_execute decorator ... ERROR\ntest_session_summary (__main__.TestErrorHandler.test_session_summary)\nTest session summary functionality ... ERROR\ntest_ask_local_llm (__main__.TestLLMInterface.test_ask_local_llm)\nTest LLM interaction (mocked) ... ok\ntest_available_models (__main__.TestLLMInterface.test_available_models)\nTest available models list ... ok\ntest_dynamic_timeout (__main__.TestLLMInterface.test_dynamic_timeout)\nTest dynamic timeout calculation ... ok\ntest_model_operations (__main__.TestLLMInterface.test_model_operations)\nTest model get/set operations ... ok\ntest_forget_fact (__main__.TestMemory.test_forget_fact)\nTest fact forgetting ... ok\ntest_load_save_memory (__main__.TestMemory.test_load_save_memory)\nTest memory load/save operations ... ok\ntest_process_memory_prompt (__main__.TestMemory.test_process_memory_prompt)\nTest memory prompt processing ... ok\ntest_recall_fact (__main__.TestMemory.test_recall_fact)\nTest fact recall ... ok\ntest_remember_fact (__main__.TestMemory.test_remember_fact)\nTest fact remembering ... ok\ntest_available_models_constant (__main__.TestLogs.test_available_models_constant)\nTest available models constant in logs ... ok\ntest_log_event (__main__.TestLogs.test_log_event)\nTest event logging ... ok\ntest_log_formatting (__main__.TestLogs.test_log_formatting)\nTest log formatting function ... ok\ntest_available_models (__main__.TestMainModule.test_available_models)\nTest available models constant ... ERROR\ntest_main_interactive_functions (__main__.TestMainModule.test_main_interactive_functions)\nTest main module interactive functions ... ERROR\ntest_memory_integration_in_main (__main__.TestMainModule.test_memory_integration_in_main)\nTest memory integration in main module ... ok\ntest_simple_llm_process (__main__.TestMainModule.test_simple_llm_process)\nTest simple LLM processing ... ERROR\ntest_simple_log_to_file (__main__.TestMainModule.test_simple_log_to_file)\nTest simple file logging ... ERROR\ntest_version_string (__main__.TestMainModule.test_version_string)\nTest version string constant ... ERROR\n\n======================================================================\nERROR: test_log_error (__main__.TestErrorHandler.test_log_error)\nTest error logging functionality\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\unit\\test_unit_comprehensive.py\", line 48, in test_log_error\n    result = handler.log_error(test_error, \"Test context\", ErrorLevel.ERROR, \"Test message\")\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 76, in log_error\n    print(f\"{emoji} {error_data['user_message']}\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\u274c' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_safe_execute_decorator (__main__.TestErrorHandler.test_safe_execute_decorator)\nTest safe_execute decorator\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 147, in wrapper\n    return func(*args, **kwargs)\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\unit\\test_unit_comprehensive.py\", line 74, in test_function\n    raise Exception(\"Test error\")\nException: Test error\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\unit\\test_unit_comprehensive.py\", line 76, in test_safe_execute_decorator\n    result = test_function()\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 149, in wrapper\n    error_handler.log_error(e, context or func.__name__, level, user_message)\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 76, in log_error\n    print(f\"{emoji} {error_data['user_message']}\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\u274c' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_session_summary (__main__.TestErrorHandler.test_session_summary)\nTest session summary functionality\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\unit\\test_unit_comprehensive.py\", line 85, in test_session_summary\n    error_handler.log_error(test_error, \"Test context\", ErrorLevel.ERROR, \"Test message\")\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 76, in log_error\n    print(f\"{emoji} {error_data['user_message']}\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\u274c' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_available_models (__main__.TestMainModule.test_available_models)\nTest available models constant\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\unit\\test_unit_comprehensive.py\", line 325, in test_available_models\n    from main import AVAILABLE_MODELS\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\main.py\", line 14, in <module>\n    from jarvis.core.main import (\n    ...<6 lines>...\n    )\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\main.py\", line 20, in <module>\n    print(f\"\\U0001f680 AutoGPT {VERSION_STRING} - Simplified AI Assistant\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f680' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_main_interactive_functions (__main__.TestMainModule.test_main_interactive_functions)\nTest main module interactive functions\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\unit\\test_unit_comprehensive.py\", line 362, in test_main_interactive_functions\n    from jarvis.core.main import simple_llm_process, simple_log_to_file\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\main.py\", line 20, in <module>\n    print(f\"\\U0001f680 AutoGPT {VERSION_STRING} - Simplified AI Assistant\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f680' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_simple_llm_process (__main__.TestMainModule.test_simple_llm_process)\nTest simple LLM processing\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"F:\\python 2025\\Lib\\unittest\\mock.py\", line 1423, in patched\n    with self.decoration_helper(patched,\n         ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^\n                                args,\n                                ^^^^^\n                                keywargs) as (newargs, newkeywargs):\n                                ^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\contextlib.py\", line 141, in __enter__\n    return next(self.gen)\n  File \"F:\\python 2025\\Lib\\unittest\\mock.py\", line 1405, in decoration_helper\n    arg = exit_stack.enter_context(patching)\n  File \"F:\\python 2025\\Lib\\contextlib.py\", line 530, in enter_context\n    result = _enter(cm)\n  File \"F:\\python 2025\\Lib\\unittest\\mock.py\", line 1481, in __enter__\n    self.target = self.getter()\n                  ~~~~~~~~~~~^^\n  File \"F:\\python 2025\\Lib\\pkgutil.py\", line 518, in resolve_name\n    mod = importlib.import_module(s)\n  File \"F:\\python 2025\\Lib\\importlib\\__init__.py\", line 88, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<frozen importlib._bootstrap>\", line 1387, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 1360, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 1331, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 935, in _load_unlocked\n  File \"<frozen importlib._bootstrap_external>\", line 1026, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\main.py\", line 20, in <module>\n    print(f\"\\U0001f680 AutoGPT {VERSION_STRING} - Simplified AI Assistant\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f680' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_simple_log_to_file (__main__.TestMainModule.test_simple_log_to_file)\nTest simple file logging\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\unit\\test_unit_comprehensive.py\", line 349, in test_simple_log_to_file\n    from main import simple_log_to_file\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\main.py\", line 14, in <module>\n    from jarvis.core.main import (\n    ...<6 lines>...\n    )\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\main.py\", line 20, in <module>\n    print(f\"\\U0001f680 AutoGPT {VERSION_STRING} - Simplified AI Assistant\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f680' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_version_string (__main__.TestMainModule.test_version_string)\nTest version string constant\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\unit\\test_unit_comprehensive.py\", line 318, in test_version_string\n    from main import VERSION_STRING\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\main.py\", line 14, in <module>\n    from jarvis.core.main import (\n    ...<6 lines>...\n    )\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\main.py\", line 20, in <module>\n    print(f\"\\U0001f680 AutoGPT {VERSION_STRING} - Simplified AI Assistant\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f680' in position 0: character maps to <undefined>\n\n----------------------------------------------------------------------\nRan 23 tests in 0.060s\n\nFAILED (errors=8)\n",
      "return_code": 1
    },
    {
      "name": "Integration Tests",
      "status": "\u274c FAIL",
      "duration": 2.332085609436035,
      "total_tests": 0,
      "failures": 0,
      "errors": 0,
      "success_rate": 0,
      "output": "",
      "error_output": "test_error_handler_llm_integration (__main__.TestModuleIntegration.test_error_handler_llm_integration)\nTest error handler integration with LLM interface ... FAIL\ntest_main_gui_integration (__main__.TestModuleIntegration.test_main_gui_integration)\nTest main module integration with GUI components ... ERROR\ntest_memory_logging_integration (__main__.TestModuleIntegration.test_memory_logging_integration)\nTest memory system integration with logging ... ok\ntest_error_handling_workflow (__main__.TestEndToEndWorkflows.test_error_handling_workflow)\nTest complete error handling workflow ... ERROR\ntest_llm_interaction_workflow (__main__.TestEndToEndWorkflows.test_llm_interaction_workflow)\nTest complete LLM interaction workflow ... ERROR\ntest_logging_workflow (__main__.TestEndToEndWorkflows.test_logging_workflow)\nTest complete logging workflow ... ok\ntest_memory_workflow (__main__.TestEndToEndWorkflows.test_memory_workflow)\nTest complete memory management workflow ... ok\ntest_gui_imports (__main__.TestGUIIntegration.test_gui_imports)\nTest that GUI can be imported without errors ... ok\ntest_gui_initialization (__main__.TestGUIIntegration.test_gui_initialization)\nTest GUI initialization without showing window ... QWidget: Must construct a QApplication before a QWidget\n",
      "return_code": 3221226505
    },
    {
      "name": "Functional Tests",
      "status": "\u274c FAIL",
      "duration": 1.2773945331573486,
      "total_tests": 0,
      "failures": 0,
      "errors": 0,
      "success_rate": 0,
      "output": "",
      "error_output": "test_interactive_commands (__main__.TestCLIFunctionality.test_interactive_commands)\nTest interactive command processing ... ERROR\ntest_main_script_execution (__main__.TestCLIFunctionality.test_main_script_execution)\nTest that main.py can be executed ... ok\ntest_gui_component_functionality (__main__.TestGUIFunctionality.test_gui_component_functionality)\nTest GUI component functionality ... QWidget: Must construct a QApplication before a QWidget\n",
      "return_code": 3221226505
    },
    {
      "name": "Regression Tests",
      "status": "\u274c FAIL",
      "duration": 0.30855727195739746,
      "total_tests": 14,
      "failures": 0,
      "errors": 0,
      "success_rate": 71.4,
      "output": "\n============================================================\nREGRESSION TEST SUMMARY\n============================================================\nTests run: 14\nFailures: 0\nErrors: 4\nSuccess rate: 71.4%\n",
      "error_output": "test_no_complex_archive_system (__main__.TestHistoricalBugFixes.test_no_complex_archive_system)\nRegression: Complex archive system should be removed ... ERROR\ntest_no_langchain_dependencies (__main__.TestHistoricalBugFixes.test_no_langchain_dependencies)\nRegression: Langchain dependencies should be completely removed ... ERROR\ntest_no_memory_leaks_in_gui (__main__.TestHistoricalBugFixes.test_no_memory_leaks_in_gui)\nRegression: GUI should not have memory leaks from parent-child issues ... QFontDatabase: Cannot find font directory F:/python 2025/Lib/site-packages/PyQt5/Qt5/lib/fonts.\nNote that Qt no longer ships fonts. Deploy some (from https://dejavu-fonts.github.io/ for example) or switch to fontconfig.\nQFontDatabase: Cannot find font directory F:/python 2025/Lib/site-packages/PyQt5/Qt5/lib/fonts.\nNote that Qt no longer ships fonts. Deploy some (from https://dejavu-fonts.github.io/ for example) or switch to fontconfig.\nQFontDatabase: Cannot find font directory F:/python 2025/Lib/site-packages/PyQt5/Qt5/lib/fonts.\nNote that Qt no longer ships fonts. Deploy some (from https://dejavu-fonts.github.io/ for example) or switch to fontconfig.\nQFontDatabase: Cannot find font directory F:/python 2025/Lib/site-packages/PyQt5/Qt5/lib/fonts.\nNote that Qt no longer ships fonts. Deploy some (from https://dejavu-fonts.github.io/ for example) or switch to fontconfig.\nQFontDatabase: Cannot find font directory F:/python 2025/Lib/site-packages/PyQt5/Qt5/lib/fonts.\nNote that Qt no longer ships fonts. Deploy some (from https://dejavu-fonts.github.io/ for example) or switch to fontconfig.\nok\ntest_no_qtextcursor_threading_errors (__main__.TestHistoricalBugFixes.test_no_qtextcursor_threading_errors)\nRegression: QTextCursor threading errors should not occur ... QFontDatabase: Cannot find font directory F:/python 2025/Lib/site-packages/PyQt5/Qt5/lib/fonts.\nNote that Qt no longer ships fonts. Deploy some (from https://dejavu-fonts.github.io/ for example) or switch to fontconfig.\nQFontDatabase: Cannot find font directory F:/python 2025/Lib/site-packages/PyQt5/Qt5/lib/fonts.\nNote that Qt no longer ships fonts. Deploy some (from https://dejavu-fonts.github.io/ for example) or switch to fontconfig.\nQFontDatabase: Cannot find font directory F:/python 2025/Lib/site-packages/PyQt5/Qt5/lib/fonts.\nNote that Qt no longer ships fonts. Deploy some (from https://dejavu-fonts.github.io/ for example) or switch to fontconfig.\nQFontDatabase: Cannot find font directory F:/python 2025/Lib/site-packages/PyQt5/Qt5/lib/fonts.\nNote that Qt no longer ships fonts. Deploy some (from https://dejavu-fonts.github.io/ for example) or switch to fontconfig.\nQFontDatabase: Cannot find font directory F:/python 2025/Lib/site-packages/PyQt5/Qt5/lib/fonts.\nNote that Qt no longer ships fonts. Deploy some (from https://dejavu-fonts.github.io/ for example) or switch to fontconfig.\nok\ntest_no_unknown_property_transform_errors (__main__.TestHistoricalBugFixes.test_no_unknown_property_transform_errors)\nRegression: 'Unknown property transform' CSS errors should not occur ... ok\ntest_error_handler_interface_consistency (__main__.TestInterfaceConsistency.test_error_handler_interface_consistency)\nTest error handler interface maintains expected API ... ok\ntest_llm_interface_consistency (__main__.TestInterfaceConsistency.test_llm_interface_consistency)\nTest LLM interface maintains expected API ... ok\ntest_memory_interface_consistency (__main__.TestInterfaceConsistency.test_memory_interface_consistency)\nTest memory interface maintains expected API ... ok\ntest_error_handling_data_integrity (__main__.TestDataIntegrity.test_error_handling_data_integrity)\nTest that error handling preserves data integrity ... ERROR\ntest_log_data_integrity (__main__.TestDataIntegrity.test_log_data_integrity)\nTest that log data maintains integrity ... ok\ntest_memory_data_integrity (__main__.TestDataIntegrity.test_memory_data_integrity)\nTest that memory data remains intact through operations ... ok\ntest_llm_interface_performance (__main__.TestPerformanceRegression.test_llm_interface_performance)\nTest that LLM interface operations are reasonably fast ... ERROR\ntest_log_operation_performance (__main__.TestPerformanceRegression.test_log_operation_performance)\nTest that logging operations are reasonably fast ... ok\ntest_memory_operation_performance (__main__.TestPerformanceRegression.test_memory_operation_performance)\nTest that memory operations are reasonably fast ... ok\n\n======================================================================\nERROR: test_no_complex_archive_system (__main__.TestHistoricalBugFixes.test_no_complex_archive_system)\nRegression: Complex archive system should be removed\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\regression\\test_regression_comprehensive.py\", line 104, in test_no_complex_archive_system\n    from jarvis.core.main import process_interactive_input\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\main.py\", line 20, in <module>\n    print(f\"\\U0001f680 AutoGPT {VERSION_STRING} - Simplified AI Assistant\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f680' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_no_langchain_dependencies (__main__.TestHistoricalBugFixes.test_no_langchain_dependencies)\nRegression: Langchain dependencies should be completely removed\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\regression\\test_regression_comprehensive.py\", line 77, in test_no_langchain_dependencies\n    module = __import__(module_name)\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\main.py\", line 14, in <module>\n    from jarvis.core.main import (\n    ...<6 lines>...\n    )\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\main.py\", line 20, in <module>\n    print(f\"\\U0001f680 AutoGPT {VERSION_STRING} - Simplified AI Assistant\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f680' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_error_handling_data_integrity (__main__.TestDataIntegrity.test_error_handling_data_integrity)\nTest that error handling preserves data integrity\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 147, in wrapper\n    return func(*args, **kwargs)\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\regression\\test_regression_comprehensive.py\", line 301, in data_processing_function\n    raise Exception(\"Simulated error\")\nException: Simulated error\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\regression\\test_regression_comprehensive.py\", line 304, in test_error_handling_data_integrity\n    result = data_processing_function()\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 149, in wrapper\n    error_handler.log_error(e, context or func.__name__, level, user_message)\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 76, in log_error\n    print(f\"{emoji} {error_data['user_message']}\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\u274c' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_llm_interface_performance (__main__.TestPerformanceRegression.test_llm_interface_performance)\nTest that LLM interface operations are reasonably fast\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"F:\\python 2025\\Lib\\unittest\\mock.py\", line 1426, in patched\n    return func(*newargs, **newkeywargs)\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\regression\\test_regression_comprehensive.py\", line 361, in test_llm_interface_performance\n    from jarvis.core.main import simple_llm_process\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\main.py\", line 20, in <module>\n    print(f\"\\U0001f680 AutoGPT {VERSION_STRING} - Simplified AI Assistant\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f680' in position 0: character maps to <undefined>\n\n----------------------------------------------------------------------\nRan 14 tests in 0.231s\n\nFAILED (errors=4)\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\regression\\test_regression_comprehensive.py\", line 415, in <module>\n    print(f\"\\n\\u274c ERRORS DETECTED:\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\u274c' in position 2: character maps to <undefined>\n",
      "return_code": 1
    },
    {
      "name": "Performance Tests",
      "status": "\u274c FAIL",
      "duration": 1.7201595306396484,
      "total_tests": 11,
      "failures": 0,
      "errors": 0,
      "success_rate": 18.2,
      "output": "   Size 100: Remember 0.001s, Recall 0.000s\n   Size 1000: Remember 0.001s, Recall 0.000s\n   Size 5000: Remember 0.001s, Recall 0.000s\n   Size 10000: Remember 0.001s, Recall 0.000s\n   Size 1000: 0.0003s\n   Size 5000: 0.0002s\n   Size 10000: 0.0005s\n   Size 20000: 0.0008s\n\n============================================================\nPERFORMANCE TEST SUMMARY\n============================================================\nTests run: 11\nFailures: 0\nErrors: 9\nSuccess rate: 18.2%\n",
      "error_output": "test_bulk_memory_operations (__main__.TestMemoryPerformance.test_bulk_memory_operations)\nTest performance with bulk memory operations ... ERROR\ntest_concurrent_memory_access (__main__.TestMemoryPerformance.test_concurrent_memory_access)\nTest memory performance under concurrent access ... ERROR\ntest_memory_size_limits (__main__.TestMemoryPerformance.test_memory_size_limits)\nTest memory performance with large data ... ok\ntest_bulk_logging_performance (__main__.TestLoggingPerformance.test_bulk_logging_performance)\nTest performance with bulk logging operations ... ERROR\ntest_concurrent_logging (__main__.TestLoggingPerformance.test_concurrent_logging)\nTest logging performance under concurrent access ... ERROR\ntest_large_event_logging (__main__.TestLoggingPerformance.test_large_event_logging)\nTest logging performance with large events ... ok\ntest_llm_call_performance (__main__.TestLLMInterfacePerformance.test_llm_call_performance)\nTest LLM interface call performance ... ERROR\ntest_model_switching_performance (__main__.TestLLMInterfacePerformance.test_model_switching_performance)\nTest model switching performance ... ERROR\ntest_error_logging_performance (__main__.TestErrorHandlingPerformance.test_error_logging_performance)\nTest error logging performance ... ERROR\ntest_safe_execute_performance (__main__.TestErrorHandlingPerformance.test_safe_execute_performance)\nTest safe_execute decorator performance ... ERROR\ntest_complete_workflow_performance (__main__.TestSystemPerformance.test_complete_workflow_performance)\nTest performance of complete user workflows ... ERROR\n\n======================================================================\nERROR: test_bulk_memory_operations (__main__.TestMemoryPerformance.test_bulk_memory_operations)\nTest performance with bulk memory operations\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\performance\\test_performance_comprehensive.py\", line 67, in test_bulk_memory_operations\n    print(f\"\\n\\U0001f4be Memory Performance Metrics:\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f4be' in position 2: character maps to <undefined>\n\n======================================================================\nERROR: test_concurrent_memory_access (__main__.TestMemoryPerformance.test_concurrent_memory_access)\nTest memory performance under concurrent access\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\performance\\test_performance_comprehensive.py\", line 148, in test_concurrent_memory_access\n    print(f\"\\n\\U0001f504 Concurrent Memory Performance:\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f504' in position 2: character maps to <undefined>\n\n======================================================================\nERROR: test_bulk_logging_performance (__main__.TestLoggingPerformance.test_bulk_logging_performance)\nTest performance with bulk logging operations\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\performance\\test_performance_comprehensive.py\", line 204, in test_bulk_logging_performance\n    print(f\"\\n\\U0001f4dd Logging Performance Metrics:\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f4dd' in position 2: character maps to <undefined>\n\n======================================================================\nERROR: test_concurrent_logging (__main__.TestLoggingPerformance.test_concurrent_logging)\nTest logging performance under concurrent access\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\performance\\test_performance_comprehensive.py\", line 268, in test_concurrent_logging\n    print(f\"\\n\\U0001f504 Concurrent Logging Performance:\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f504' in position 2: character maps to <undefined>\n\n======================================================================\nERROR: test_llm_call_performance (__main__.TestLLMInterfacePerformance.test_llm_call_performance)\nTest LLM interface call performance\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"F:\\python 2025\\Lib\\unittest\\mock.py\", line 1426, in patched\n    return func(*newargs, **newkeywargs)\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\performance\\test_performance_comprehensive.py\", line 282, in test_llm_call_performance\n    from jarvis.core.main import simple_llm_process\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\main.py\", line 20, in <module>\n    print(f\"\\U0001f680 AutoGPT {VERSION_STRING} - Simplified AI Assistant\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f680' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_model_switching_performance (__main__.TestLLMInterfacePerformance.test_model_switching_performance)\nTest model switching performance\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\performance\\test_performance_comprehensive.py\", line 346, in test_model_switching_performance\n    print(f\"\\n\\U0001f504 Model Switching Performance:\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f504' in position 2: character maps to <undefined>\n\n======================================================================\nERROR: test_error_logging_performance (__main__.TestErrorHandlingPerformance.test_error_logging_performance)\nTest error logging performance\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\performance\\test_performance_comprehensive.py\", line 378, in test_error_logging_performance\n    error_handler.log_error(\n    ~~~~~~~~~~~~~~~~~~~~~~~^\n        test_error,\n        ^^^^^^^^^^^\n    ...<2 lines>...\n        f\"Performance test message {i}\"\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 76, in log_error\n    print(f\"{emoji} {error_data['user_message']}\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode characters in position 0-1: character maps to <undefined>\n\n======================================================================\nERROR: test_safe_execute_performance (__main__.TestErrorHandlingPerformance.test_safe_execute_performance)\nTest safe_execute decorator performance\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 147, in wrapper\n    return func(*args, **kwargs)\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\performance\\test_performance_comprehensive.py\", line 405, in failing_function\n    raise Exception(\"Test error\")\nException: Test error\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\performance\\test_performance_comprehensive.py\", line 415, in test_safe_execute_performance\n    result = failing_function()\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 149, in wrapper\n    error_handler.log_error(e, context or func.__name__, level, user_message)\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\error_handler.py\", line 76, in log_error\n    print(f\"{emoji} {error_data['user_message']}\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\u274c' in position 0: character maps to <undefined>\n\n======================================================================\nERROR: test_complete_workflow_performance (__main__.TestSystemPerformance.test_complete_workflow_performance)\nTest performance of complete user workflows\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"F:\\python 2025\\Lib\\unittest\\mock.py\", line 1426, in patched\n    return func(*newargs, **newkeywargs)\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\tests\\performance\\test_performance_comprehensive.py\", line 445, in test_complete_workflow_performance\n    from jarvis.core.main import simple_llm_process, process_interactive_input\n  File \"C:\\AutoGPT_working\\classic\\original_autogpt\\autogpt\\app\\jarvis\\core\\main.py\", line 20, in <module>\n    print(f\"\\U0001f680 AutoGPT {VERSION_STRING} - Simplified AI Assistant\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\python 2025\\Lib\\encodings\\cp1250.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f680' in position 0: character maps to <undefined>\n\n----------------------------------------------------------------------\nRan 11 tests in 1.648s\n\nFAILED (errors=9)\n",
      "return_code": 1
    }
  ],
  "coverage": {
    "timestamp": "2025-07-28T21:34:06.496884",
    "source_files": 6,
    "test_files": 5,
    "coverage_summary": {
      "total_lines": 25,
      "tested_functions": 0,
      "coverage_percentage": 75
    }
  },
  "error_analysis": {
    "total_errors": 5,
    "total_warnings": 0,
    "real_errors": 0,
    "test_errors": 5,
    "recent_real_errors": []
  },
  "summary": {
    "total_suites": 5,
    "passed_suites": 0,
    "failed_suites": 5,
    "total_tests": 48,
    "overall_success_rate": 100.0
  }
}