# GitHub Copilot Workspace Configuration
# This file helps configure optimal Copilot behavior for the Jarvis AI Assistant project

# Project Context
project_name: "Jarvis AI Assistant"
project_type: "Python AI/ML Platform"
version: "1.0.0"

# Copilot Optimization Settings
copilot_settings:
  # Code suggestions optimized for AI/ML development
  ai_ml_context: true
  
  # Focus areas for enhanced suggestions
  focus_areas:
    - "AI model integration"
    - "Quantum computing algorithms" 
    - "Async/await patterns"
    - "PyQt5 GUI development"
    - "REST API endpoints"
    - "Test generation"
    - "Documentation generation"
  
  # Programming patterns to emphasize
  patterns:
    - "Factory pattern for AI models"
    - "Observer pattern for GUI updates"
    - "Strategy pattern for algorithms"
    - "Async context managers"
    - "Type hints and annotations"
    - "Error handling and logging"

# File Types for Enhanced Copilot Assistance
supported_files:
  primary:
    - "*.py"        # Python source files
    - "*.yml"       # YAML configuration
    - "*.yaml"      # YAML workflows
    - "*.json"      # JSON configuration
    - "*.md"        # Markdown documentation
  
  secondary:
    - "*.txt"       # Text documentation
    - "*.cfg"       # Configuration files
    - "*.ini"       # INI configuration
    - "Dockerfile"  # Container configuration

# Copilot Workspace Triggers
triggers:
  branch_patterns:
    - "copilot/*"        # Any branch starting with copilot/
    - "feature/copilot-*" # Feature branches with copilot prefix
    - "fix/copilot-*"    # Fix branches with copilot prefix
  
  issue_labels:
    - "copilot"          # General Copilot assistance
    - "copilot-tests"    # Test generation focus
    - "copilot-docs"     # Documentation enhancement
    - "copilot-review"   # Code review assistance
    - "ai-enhancement"   # AI-related improvements
  
  file_patterns:
    - "jarvis/**/*.py"   # Core Jarvis modules
    - "tests/**/*.py"    # Test files
    - "gui/**/*.py"      # GUI components
    - "*.md"             # Documentation files

# Development Workflow Integration
workflow_integration:
  auto_pr_review: true      # Enable automatic PR review suggestions
  auto_test_generation: true # Enable automatic test generation
  auto_documentation: true   # Enable automatic documentation updates
  code_quality_checks: true  # Enable code quality suggestions

# Project-Specific Context
project_context:
  description: |
    Jarvis is an advanced AI assistant platform featuring:
    - Quantum-enhanced AI capabilities
    - Multi-modal processing (text, image, audio, video)
    - Professional PyQt5 GUI with 9-tab dashboard
    - Enterprise-grade security and compliance
    - Autonomous decision-making and predictive analytics
    - CRDT systems for distributed data handling
    - Support for 6+ AI providers (GPT-4, Claude, LLaMA, etc.)
  
  key_technologies:
    - "Python 3.8+"
    - "FastAPI for REST APIs"
    - "PyQt5 for GUI"
    - "SQLAlchemy for database"
    - "Async/await for concurrency"
    - "Pytest for testing"
    - "ChromaDB for vector storage"
    - "Quantum simulation libraries"
  
  coding_standards:
    - "PEP 8 compliance"
    - "Type hints required"
    - "Comprehensive docstrings"
    - "Async-first design"
    - "Error handling with logging"
    - "Security-first development"

# AI Model Context
ai_models:
  supported_providers:
    - name: "OpenAI"
      models: ["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"]
    - name: "Anthropic" 
      models: ["claude-3", "claude-3.5-sonnet"]
    - name: "Google"
      models: ["gemini-pro", "gemini-ultra"]
    - name: "Meta"
      models: ["llama-3-70b", "llama-2"]
    - name: "Mistral"
      models: ["mistral-large", "mistral-medium"]
    - name: "Ollama"
      models: ["local-models"]

# Testing Strategy
testing_focus:
  unit_tests:
    - "Core AI integration functions"
    - "Quantum algorithm implementations"
    - "GUI component functionality"
    - "API endpoint behavior"
    - "Security and authentication"
  
  integration_tests:
    - "AI provider communication"
    - "Database operations"
    - "File processing workflows"
    - "GUI-backend integration"
  
  performance_tests:
    - "AI inference speed"
    - "Memory usage optimization"
    - "Concurrent request handling"
    - "Quantum simulation performance"

# Documentation Requirements
documentation_standards:
  code_documentation:
    - "All public functions must have docstrings"
    - "Complex algorithms need detailed comments"
    - "Type hints for all function parameters"
    - "Examples in docstrings for complex functions"
  
  project_documentation:
    - "API documentation with examples"
    - "Installation and setup guides"
    - "Configuration documentation"
    - "Troubleshooting guides"
    - "Architecture decision records"

# Security Considerations
security_guidelines:
  - "Never commit API keys or secrets"
  - "Use environment variables for sensitive data"
  - "Implement proper input validation"
  - "Follow OWASP security practices"
  - "Regular dependency vulnerability scans"
  - "Secure AI model API communications"

# Performance Optimization
performance_guidelines:
  - "Use async/await for I/O operations"
  - "Implement caching for expensive operations"
  - "Optimize database queries"
  - "Profile memory usage regularly"
  - "Use lazy loading where appropriate"
  - "Implement connection pooling"