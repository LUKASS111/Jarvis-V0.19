name: Code Quality Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt5 psutil requests
        pip install pytest pytest-cov flake8 black mypy bandit safety
        pip install coverage pytest-xvfb

    - name: Code Style Check (PEP 8)
      run: |
        flake8 jarvis/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 jarvis/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Code Formatting Check
      run: |
        black --check --line-length=88 jarvis/

    - name: Type Checking
      run: |
        mypy jarvis/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

    - name: Security Scanning
      run: |
        bandit -r jarvis/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Test Coverage
      run: |
        export QT_QPA_PLATFORM=offscreen
        python -m pytest tests/ -v --cov=jarvis --cov-report=xml --cov-report=html --cov-fail-under=85

    - name: Integration Tests
      run: |
        export QT_QPA_PLATFORM=offscreen
        python run_tests.py
      timeout-minutes: 15

    - name: Performance Benchmarks
      run: |
        export QT_QPA_PLATFORM=offscreen
        python -m pytest tests/performance/ -v --tb=short
      continue-on-error: true

    - name: Architecture Validation
      run: |
        python validate_architecture.py
      continue-on-error: true

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Quality Gate Summary
      run: |
        echo "## Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code style checked" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security scanned" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Tests executed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Coverage validated" >> $GITHUB_STEP_SUMMARY

  documentation-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check Documentation Coverage
      run: |
        # Count Python files
        PY_FILES=$(find jarvis/ -name "*.py" | wc -l)
        
        # Count documented functions (basic heuristic)
        DOCUMENTED=$(grep -r "def " jarvis/ | grep -A 1 '"""' | wc -l)
        
        echo "Python files: $PY_FILES"
        echo "Documented functions: $DOCUMENTED"
        
        # Check for TODO items in production code
        TODO_COUNT=$(grep -r "TODO" jarvis/ --exclude-dir=__pycache__ | wc -l)
        if [ $TODO_COUNT -gt 0 ]; then
          echo "❌ Found $TODO_COUNT TODO items in production code"
          grep -r "TODO" jarvis/ --exclude-dir=__pycache__
          exit 1
        else
          echo "✅ No TODO items found in production code"
        fi

    - name: Validate Documentation Files
      run: |
        # Check for required documentation
        REQUIRED_DOCS=("README.md" "CONTRIBUTING.md" "CHANGELOG.md" "docs/CURRENT_SYSTEM_STATUS.md")
        
        for doc in "${REQUIRED_DOCS[@]}"; do
          if [ -f "$doc" ]; then
            echo "✅ $doc exists"
          else
            echo "❌ $doc missing"
            exit 1
          fi
        done

  merge-gate:
    runs-on: ubuntu-latest
    needs: [quality-gate, documentation-check]
    if: github.event_name == 'pull_request'
    steps:
    - name: Quality Gate Passed
      run: |
        echo "✅ All quality gates passed - merge approved"
        echo "## Quality Gate Status" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code quality validated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Documentation validated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Ready for merge" >> $GITHUB_STEP_SUMMARY